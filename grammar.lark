start: statement*

?function_name: name
?function_args: [name ("," name)*]
function_body: statement+
function: "function" function_name "(" function_args ")" "{" function_body "}"

?statement: function
    | raw_command
    | name "=" expression -> assignment
    | "return" expression -> return
    | function_call
    | command_call

function_call: namespace ":" name "(" call_args ")"
call_args: [expression ("," expression)*]

?expression: sum
    | function_call

command_call: name "(" c_call_args ")"
c_call_args: [c_expression ("," c_expression)*]

?c_expression: 

?sum: product
    | sum "+" product   -> add
    | sum "-" product   -> sub

?product: atom
    | product "*" atom  -> mul
    | product "/" atom  -> div
    | product "%" atom  -> mod

?atom: number           -> number
    | "-" atom          -> neg
    | name              -> var
    | "(" sum ")"

// brigadier arguments
selector: /@["aeprs"](?:\[.+\])?/
coords: /(?:[\^~]?-?\d* ){2}[\^~]?-?\d*/
namespaced_id: /[\w-]+:[\w-\/\.]+/ // blocks, items, entities, etc

raw_command: "/" /.+/

string: ESCAPED_STRING
?number: SIGNED_INT
?name: CNAME
?namespace: CNAME
%import common.ESCAPED_STRING
%import common.WS
%import common.CNAME
%import common.SIGNED_INT
%ignore WS