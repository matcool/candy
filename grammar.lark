start: statement*

?function_name: name
?function_args: [name ("," name)*]
function_body: statement+
function: "function" function_name "(" function_args ")" "{" function_body "}"

?statement: function
    | raw_command
    | name "=" expression -> assignment
    | "return" expression -> return
    | function_call
    | command_call

function_call: namespace ":" name "(" call_args ")"
call_args: [expression ("," expression)*]

?expression: sum
    | function_call

command_call: name "(" c_call_args ")"
c_call_args: [c_expression ("," c_expression)*]

?c_expression: selector
    | coords
    | string
    | json_text
    | name
    | namespaced_id

?sum: product
    | sum "+" product   -> add
    | sum "-" product   -> sub

?product: atom
    | product "*" atom  -> mul
    | product "/" atom  -> div
    | product "%" atom  -> mod

?atom: number           -> number
    | "-" atom          -> neg
    | name              -> var
    | "(" sum ")"

// brigadier arguments
selector: /@["aeprs"](?:\[.+\])?/
coords: /(?:[\^~]?-?\d* ){2}[\^~]?-?\d*/
namespaced_id: /[\w\-]+:[\w\-\/\.]+/ // blocks, items, entities, etc

// json text
?json_text: jt_array
?jt_value: jt_object
    | jt_array
    | string
    | "$" name -> variable
    | jt_const
jt_array: "[" [jt_value ("," jt_value)*] "]"
jt_object: "{" [jt_pair ("," jt_pair)*] "}"
?jt_key: string
    | name -> name
jt_pair: jt_key ":" jt_value
!jt_const: "true" | "false" | "null"

raw_command: _NEWLINE "/" /.+/

string: ESCAPED_STRING
?number: SIGNED_INT
?name: CNAME
?namespace: CNAME
_NEWLINE: NEWLINE
%import common.ESCAPED_STRING
%import common.WS
%import common.CNAME
%import common.SIGNED_INT
%import common.NEWLINE
%ignore WS
%ignore /#[^\n]*/